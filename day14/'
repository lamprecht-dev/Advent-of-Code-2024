import sys
import collections
import datetime
import itertools
import functools
import math
from operator import itemgetter as ig
import pprint as pp
import re
# import bisect
# import heapq
# sys.setrecursionlimit(1000000)

sys.path.append('../')
from utils import *


def getQuadrant(robot, dim, time):
    quadrant = "tr"
    
    

    return quadrant


def s(d, part, test = False):
    if part == 2:
        return 0

    dim = (101, 103)
    if test:
        dim = (11, 7)

    quadrants = {"tl": 0, "tr": 0, "bl": 0, "br": 0}
    ll = lines(d)
    for line in ll:
        p, v = line.split(" ")
        p = ints(p.split("=")[1].split(","))
        v = ints(v.split("=")[1].split(","))
        
        quadrants[getQuadrant({"p": p, "v": v}, dim, 100)] += 1
    
    pp.pp(quadrants)
    return quadrants["tl"] * quadrants["tr"] * quadrants["bl"] * quadrants["br"]


def main():
    if test():
        file = inp(os.path.join(os.path.dirname(__file__), 'input.txt'))
        solutions = (s(file, 1), s(file, 2))
        print("\n\n" + BColors.HEADER + "Solutions" + BColors.ENDC)
        for sol in solutions:
            print(sol)
    else:
        print("\n\n" + BColors.FAIL + "Not All Test Successful" + BColors.ENDC)


def test():
    example = """p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3"""
    a1 = 12
    a2 = None
    return validate_solution((s(example, 1, True), s(example, 2, True)), (a1, a2))


main()
